// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace GraphQLModels
{
    #region base classes
    public struct GraphQlFieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public bool RequiresParameters { get; set; }
        public global::System.Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : global::System.Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : global::Newtonsoft.Json.JsonConverter
    {
        public override object ReadJson(JsonReader reader, global::System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(global::System.Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, global::System.Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(global::System.Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, global::System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static global::System.Type GetElementType(global::System.Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, global::System.Type targetType, global::System.Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(global::System.Type targetContainerType, global::System.Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
        private static readonly Regex RegexEscapeGraphQlString = new Regex(@"[\\\""/\b\f\n\r\t]", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string EscapeGraphQlStringValue(string value)
        {
            return RegexEscapeGraphQlString.Replace(value, m => @$"\{GetEscapeSequence(m.Value)}");
        }
    
        private static string GetEscapeSequence(string input)
        {
            switch (input)
            {
                case "\\":
                    return "\\";
                case "\"":
                    return "\"";
                case "/":
                    return "/";
                case "\b":
                    return "b";
                case "\f":
                    return "f";
                case "\n":
                    return "n";
                case "\r":
                    return "r";
                case "\t":
                    return "t";
                default:
                    throw new InvalidOperationException($"invalid character: {input}");
            }
        }
    
        public static string BuildArgumentValue(object value, string formatMask, GraphQlBuilderOptions options, int level)
        {
            var serializer = options.ArgumentBuilder ?? DefaultGraphQlArgumentBuilder.Instance;
            if (serializer.TryBuild(new GraphQlArgumentBuilderContext { Value = value, FormatMask = formatMask, Options = options, Level = level }, out var serializedValue))
                return serializedValue;
    
            if (value is null)
                return "null";
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? $"\"{EscapeGraphQlStringValue(formattable.ToString(formatMask, CultureInfo.InvariantCulture))}\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return $"\"{dateTime.ToString("O")}\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return $"\"{dateTimeOffset.ToString("O")}\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, options, level + 2);
    
            if (value is Guid)
                return $"\"{value}\"";
    
            if (value is String @string)
                return $"\"{EscapeGraphQlStringValue(@string)}\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, options, level, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = EscapeGraphQlStringValue(Convert.ToString(value, CultureInfo.InvariantCulture));
            return $"\"{argumentValue}\"";
        }
    
        public static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, GraphQlBuilderOptions options, int level, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (options.Formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, options.IndentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, options, level));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, GraphQlBuilderOptions options, int level)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? $"${queryBuilderParameter.Name}"
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, options, level);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, options.IndentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, GraphQlBuilderOptions options, int level)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, options, level));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    public interface IGraphQlArgumentBuilder
    {
        bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString);
    }
    
    public class GraphQlArgumentBuilderContext
    {
        public object Value { get; set; }
        public string FormatMask { get; set; }
        public GraphQlBuilderOptions Options { get; set; }
        public int Level { get; set; }
    }
    
    public class DefaultGraphQlArgumentBuilder : IGraphQlArgumentBuilder
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
    
        public static readonly DefaultGraphQlArgumentBuilder Instance = new();
    
        public bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString)
        {
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (context.Value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null:
                        graphQlString = "null";
                        return true;
    
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        graphQlString = GraphQlQueryHelper.BuildArgumentValue(jValue.Value, null, context.Options, context.Level);
                        return true;
    
                    case JTokenType.String:
                        graphQlString = $"\"{GraphQlQueryHelper.EscapeGraphQlStringValue((string)jValue.Value)}\"";
                        return true;
    
                    default:
                        graphQlString = $"\"{jValue.Value}\"";
                        return true;
                }
            }
    
            if (context.Value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                graphQlString = $"{jProperty.Name}:{(context.Options.Formatting == Formatting.Indented ? " " : null)}{GraphQlQueryHelper.BuildArgumentValue(jProperty.Value, null, context.Options, context.Level)}";
                return true;
            }
    
            if (context.Value is JObject jObject)
            {
                graphQlString = GraphQlQueryHelper.BuildEnumerableArgument(jObject, null, context.Options, context.Level + 1, '{', '}');
                return true;
            }
    #endif
    
            graphQlString = null;
            return false;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => base.Value == null ? default : (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName) : base(name, graphQlTypeName, null)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public void ResetValue() => base.Value = null;
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    
        private static void EnsureGraphQlTypeName(string graphQlTypeName)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName = null)
            : base(name, graphQlTypeName ?? GetGraphQlTypeName(typeof(T)))
        {
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T defaultValue)
            : base(name, graphQlTypeName, defaultValue)
        {
        }
    
        public GraphQlQueryParameter(string name, T defaultValue, bool isNullable = true)
            : base(name, GetGraphQlTypeName(typeof(T), isNullable), defaultValue)
        {
        }
    
        private static string GetGraphQlTypeName(global::System.Type valueType, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(valueType);
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(global::System.Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(string))
                return "String";
    
            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }
    
        private static string GetValueTypeGraphQlTypeName(global::System.Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public class GraphQlBuilderOptions
    {
        public Formatting Formatting { get; set; }
        public byte IndentationSize { get; set; } = 2;
        public IGraphQlArgumentBuilder ArgumentBuilder { get; set; }
    }
    
    public abstract partial class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<GraphQlFieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(new GraphQlBuilderOptions { Formatting = formatting, IndentationSize = indentationSize });
        }
    
        public string Build(GraphQlBuilderOptions options)
        {
            return Build(options, 1);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields.Where(f => !f.RequiresParameters));
        }
    
        protected virtual string Build(GraphQlBuilderOptions options, int level)
        {
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            BuildOperationSignature(builder, options, indentationSpace, level);
    
            if (builder.Length > 0 || level > 1)
                builder.Append(indentationSpace);
    
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
    
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(options, level);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        private void BuildOperationSignature(StringBuilder builder, GraphQlBuilderOptions options, string indentationSpace, int level)
        {
            if (String.IsNullOrEmpty(_operationType))
                return;
    
            builder.Append(_operationType);
    
            if (!String.IsNullOrEmpty(_operationName))
            {
                builder.Append(" ");
                builder.Append(_operationName);
            }
    
            if (_queryParameters?.Count > 0)
            {
                builder.Append(indentationSpace);
                builder.Append("(");
    
                var separator = String.Empty;
                var isIndentedFormatting = options.Formatting == Formatting.Indented;
    
                foreach (var queryParameterInfo in _queryParameters)
                {
                    if (isIndentedFormatting)
                    {
                        builder.AppendLine(separator);
                        builder.Append(GraphQlQueryHelper.GetIndentation(level, options.IndentationSize));
                    }
                    else
                        builder.Append(separator);
    
                    builder.Append("$");
                    builder.Append(queryParameterInfo.ArgumentValue.Name);
                    builder.Append(":");
                    builder.Append(indentationSpace);
    
                    builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                    if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!") && queryParameterInfo.ArgumentValue.Value is not null)
                    {
                        builder.Append(indentationSpace);
                        builder.Append("=");
                        builder.Append(indentationSpace);
                        builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, options, 0));
                    }
    
                    if (!isIndentedFormatting)
                        separator = ",";
                }
    
                builder.Append(")");
            }
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields)
        {
            IncludeFields(fields, 0, new Dictionary<global::System.Type, int>());
        }
    
        private void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields, int level, Dictionary<global::System.Type, int> parentTypeLevel)
        {
            global::System.Type builderType = null;
    
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    if (_operationType != null && GetType() == field.QueryBuilderType ||
                        parentTypeLevel.TryGetValue(field.QueryBuilderType, out var parentLevel) && parentLevel < level)
                        continue;
    
                    if (builderType is null)
                    {
                        builderType = GetType();
                        parentLevel = parentTypeLevel.TryGetValue(builderType, out parentLevel) ? parentLevel : level;
                        parentTypeLevel[builderType] = Math.Min(level, parentLevel);
                    }
    
                    var queryBuilder = InitializeChildQueryBuilder(builderType, field.QueryBuilderType, level, parentTypeLevel);
    
                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);
    
                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(
                            queryBuilder,
                            new object[] { InitializeChildQueryBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, level, parentTypeLevel) });
    
                    if (queryBuilder._fieldCriteria.Count > 0 || queryBuilder._fragments != null)
                        IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildQueryBuilder(global::System.Type parentQueryBuilderType, global::System.Type queryBuilderType, int level, Dictionary<global::System.Type, int> parentTypeLevel)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(
                queryBuilder.AllFields.Where(f => !f.RequiresParameters),
                level + 1,
                parentTypeLevel);
    
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
    
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(GraphQlBuilderOptions options, int level);
    
            protected string BuildArgumentClause(GraphQlBuilderOptions options, int level)
            {
                var separator = options.Formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, options, level) : $"${a.ArgumentValue.Name}")}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(GraphQlBuilderOptions options, int level) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, options, level)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : $"{alias}:{separator}";
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                GetIndentation(options.Formatting, level, options.IndentationSize) +
                BuildAliasPrefix(Alias, options.Formatting) +
                FieldName +
                BuildArgumentClause(options, level) +
                BuildDirectiveClause(options, level);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(options.Formatting, level, options.IndentationSize) + BuildAliasPrefix(Alias, options.Formatting) + FieldName +
                      BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(options.Formatting, level, options.IndentationSize) + "..." + (options.Formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1);
        }
    }
    
    public abstract partial class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        /// <summary>
        /// Includes all fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes all scalar fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex && !f.RequiresParameters));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes "__typename" field; included automatically for interface and union types.
        /// </summary>
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<GraphQlQueryError> Errors { get; set; }
    }
    
    public class GraphQlQueryError
    {
        public string Message { get; set; }
        public ICollection<GraphQlErrorLocation> Locations { get; set; }
    }
    
    public class GraphQlErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string Float = "Float";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string Int64 = "Int64";
        public const string String = "String";
        public const string Time = "Time";

        public const string Faction = "Faction";
        public const string ShipRole = "ShipRole";
        public const string ShipStatus = "ShipStatus";
        public const string SystemType = "SystemType";
        public const string WaypointType = "WaypointType";

        public const string Agent = "Agent";
        public const string PageInfo = "PageInfo";
        public const string Query = "Query";
        public const string Server = "Server";
        public const string ServerAnnouncement = "ServerAnnouncement";
        public const string ServerStats = "ServerStats";
        public const string Ship = "Ship";
        public const string System = "System";
        public const string SystemConnection = "SystemConnection";
        public const string SystemEdge = "SystemEdge";
        public const string Waypoint = "Waypoint";

        public const string PageArgs = "PageArgs";

        public static readonly IReadOnlyDictionary<global::System.Type, string> ReverseMapping =
            new Dictionary<global::System.Type, string>
            {
                { typeof(string), "String" },
                { typeof(long), "Int64" },
                { typeof(bool), "Boolean" },
                { typeof(int), "Int" },
                { typeof(DateTime), "Time" },
                { typeof(PageArgs), "PageArgs" }
            };
}
    #endregion

    #region enums
    public enum Faction
    {
        [EnumMember(Value = "AEGIS")] Aegis,
        [EnumMember(Value = "ANCIENTS")] Ancients,
        [EnumMember(Value = "ASTRO")] Astro,
        [EnumMember(Value = "COBALT")] Cobalt,
        [EnumMember(Value = "CORSAIRS")] Corsairs,
        [EnumMember(Value = "COSMIC")] Cosmic,
        [EnumMember(Value = "CULT")] Cult,
        [EnumMember(Value = "DOMINION")] Dominion,
        [EnumMember(Value = "ECHO")] Echo,
        [EnumMember(Value = "ETHEREAL")] Ethereal,
        [EnumMember(Value = "GALACTIC")] Galactic,
        [EnumMember(Value = "LORDS")] Lords,
        [EnumMember(Value = "OBSIDIAN")] Obsidian,
        [EnumMember(Value = "OMEGA")] Omega,
        [EnumMember(Value = "QUANTUM")] Quantum,
        [EnumMember(Value = "SHADOW")] Shadow,
        [EnumMember(Value = "SOLITARY")] Solitary,
        [EnumMember(Value = "UNITED")] United,
        [EnumMember(Value = "VOID")] Void
    }

    public enum ShipRole
    {
        [EnumMember(Value = "CARRIER")] Carrier,
        [EnumMember(Value = "COMMAND")] Command,
        [EnumMember(Value = "EXCAVATOR")] Excavator,
        [EnumMember(Value = "EXPLORER")] Explorer,
        [EnumMember(Value = "FABRICATOR")] Fabricator,
        [EnumMember(Value = "HARVESTER")] Harvester,
        [EnumMember(Value = "HAULER")] Hauler,
        [EnumMember(Value = "INTERCEPTOR")] Interceptor,
        [EnumMember(Value = "PATROL")] Patrol,
        [EnumMember(Value = "REFINERY")] Refinery,
        [EnumMember(Value = "REPAIR")] Repair,
        [EnumMember(Value = "SATELLITE")] Satellite,
        [EnumMember(Value = "SURVEYOR")] Surveyor,
        [EnumMember(Value = "TRANSPORT")] Transport
    }

    public enum ShipStatus
    {
        [EnumMember(Value = "DOCKED")] Docked,
        [EnumMember(Value = "IN_ORBIT")] InOrbit,
        [EnumMember(Value = "IN_TRANSIT")] InTransit
    }

    public enum SystemType
    {
        [EnumMember(Value = "BLACK_HOLE")] BlackHole,
        [EnumMember(Value = "BLUE_STAR")] BlueStar,
        [EnumMember(Value = "HYPERGIANT")] Hypergiant,
        [EnumMember(Value = "NEBULA")] Nebula,
        [EnumMember(Value = "NEUTRON_STAR")] NeutronStar,
        [EnumMember(Value = "ORANGE_STAR")] OrangeStar,
        [EnumMember(Value = "RED_STAR")] RedStar,
        [EnumMember(Value = "UNSTABLE")] Unstable,
        [EnumMember(Value = "WHITE_DWARF")] WhiteDwarf,
        [EnumMember(Value = "YOUNG_STAR")] YoungStar
    }

    public enum WaypointType
    {
        [EnumMember(Value = "ARTIFICIAL_GRAVITY_WELL")] ArtificialGravityWell,
        [EnumMember(Value = "ASTEROID")] Asteroid,
        [EnumMember(Value = "ASTEROID_BASE")] AsteroidBase,
        [EnumMember(Value = "ASTEROID_FIELD")] AsteroidField,
        [EnumMember(Value = "DEBRIS_FIELD")] DebrisField,
        [EnumMember(Value = "ENGINEERED_ASTEROID")] EngineeredAsteroid,
        [EnumMember(Value = "FUEL_STATION")] FuelStation,
        [EnumMember(Value = "GAS_GIANT")] GasGiant,
        [EnumMember(Value = "GRAVITY_WELL")] GravityWell,
        [EnumMember(Value = "JUMP_GATE")] JumpGate,
        [EnumMember(Value = "MOON")] Moon,
        [EnumMember(Value = "NEBULA")] Nebula,
        [EnumMember(Value = "ORBITAL_STATION")] OrbitalStation,
        [EnumMember(Value = "PLANET")] Planet
    }
    #endregion

    #region directives
    public class GoExtraFieldDirective : GraphQlDirective
    {
        public GoExtraFieldDirective(QueryBuilderParameter<string> type, QueryBuilderParameter<string> name = null, QueryBuilderParameter<string> overrideTags = null, QueryBuilderParameter<string> description = null) : base("goExtraField")
        {
            AddArgument("type", type);
            AddArgument("name", name);
            AddArgument("overrideTags", overrideTags);
            AddArgument("description", description);
        }
    }

    public class GoModelDirective : GraphQlDirective
    {
        public GoModelDirective(QueryBuilderParameter<string> model = null, QueryBuilderParameter<IEnumerable<string>> models = null) : base("goModel")
        {
            AddArgument("model", model);
            AddArgument("models", models);
        }
    }

    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }
    #endregion

    #region builder classes
    public class AgentQueryBuilder : GraphQlQueryBuilder<AgentQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "credits" },
                new GraphQlFieldMetadata { Name = "hq" }
            };

        protected override string TypeName { get { return "Agent"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AgentQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public AgentQueryBuilder WithCredits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("credits", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptCredits()
        {
            return ExceptField("credits");
        }

        public AgentQueryBuilder WithHq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hq", alias, new GraphQlDirective[] { include, skip });
        }

        public AgentQueryBuilder ExceptHq()
        {
            return ExceptField("hq");
        }
    }

    public class PageInfoQueryBuilder : GraphQlQueryBuilder<PageInfoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "hasPreviousPage" },
                new GraphQlFieldMetadata { Name = "hasNextPage" },
                new GraphQlFieldMetadata { Name = "totalCount" },
                new GraphQlFieldMetadata { Name = "startCursor" },
                new GraphQlFieldMetadata { Name = "endCursor" }
            };

        protected override string TypeName { get { return "PageInfo"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageInfoQueryBuilder WithHasPreviousPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasPreviousPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptHasPreviousPage()
        {
            return ExceptField("hasPreviousPage");
        }

        public PageInfoQueryBuilder WithHasNextPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasNextPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptHasNextPage()
        {
            return ExceptField("hasNextPage");
        }

        public PageInfoQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }

        public PageInfoQueryBuilder WithStartCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startCursor", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptStartCursor()
        {
            return ExceptField("startCursor");
        }

        public PageInfoQueryBuilder WithEndCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endCursor", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptEndCursor()
        {
            return ExceptField("endCursor");
        }
    }

    public class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "server", IsComplex = true, QueryBuilderType = typeof(ServerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "agent", IsComplex = true, QueryBuilderType = typeof(AgentQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ships", IsComplex = true, QueryBuilderType = typeof(ShipQueryBuilder) },
                new GraphQlFieldMetadata { Name = "systems", IsComplex = true, QueryBuilderType = typeof(SystemConnectionQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithServer(ServerQueryBuilder serverQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("server", alias, serverQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptServer()
        {
            return ExceptField("server");
        }

        public QueryQueryBuilder WithAgent(AgentQueryBuilder agentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("agent", alias, agentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptAgent()
        {
            return ExceptField("agent");
        }

        public QueryQueryBuilder WithShips(ShipQueryBuilder shipQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("ships", alias, shipQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptShips()
        {
            return ExceptField("ships");
        }

        public QueryQueryBuilder WithSystems(SystemConnectionQueryBuilder systemConnectionQueryBuilder, QueryBuilderParameter<PageArgs> page = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            return WithObjectField("systems", alias, systemConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSystems()
        {
            return ExceptField("systems");
        }
    }

    public class ServerQueryBuilder : GraphQlQueryBuilder<ServerQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "version" },
                new GraphQlFieldMetadata { Name = "lastReset" },
                new GraphQlFieldMetadata { Name = "nextReset" },
                new GraphQlFieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(ServerStatsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "announcements", IsComplex = true, QueryBuilderType = typeof(ServerAnnouncementQueryBuilder) }
            };

        protected override string TypeName { get { return "Server"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ServerQueryBuilder WithVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("version", alias, new GraphQlDirective[] { include, skip });
        }

        public ServerQueryBuilder ExceptVersion()
        {
            return ExceptField("version");
        }

        public ServerQueryBuilder WithLastReset(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastReset", alias, new GraphQlDirective[] { include, skip });
        }

        public ServerQueryBuilder ExceptLastReset()
        {
            return ExceptField("lastReset");
        }

        public ServerQueryBuilder WithNextReset(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nextReset", alias, new GraphQlDirective[] { include, skip });
        }

        public ServerQueryBuilder ExceptNextReset()
        {
            return ExceptField("nextReset");
        }

        public ServerQueryBuilder WithStats(ServerStatsQueryBuilder serverStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stats", alias, serverStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServerQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }

        public ServerQueryBuilder WithAnnouncements(ServerAnnouncementQueryBuilder serverAnnouncementQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("announcements", alias, serverAnnouncementQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServerQueryBuilder ExceptAnnouncements()
        {
            return ExceptField("announcements");
        }
    }

    public class ServerAnnouncementQueryBuilder : GraphQlQueryBuilder<ServerAnnouncementQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "body" }
            };

        protected override string TypeName { get { return "ServerAnnouncement"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ServerAnnouncementQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ServerAnnouncementQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public ServerAnnouncementQueryBuilder WithBody(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("body", alias, new GraphQlDirective[] { include, skip });
        }

        public ServerAnnouncementQueryBuilder ExceptBody()
        {
            return ExceptField("body");
        }
    }

    public class ServerStatsQueryBuilder : GraphQlQueryBuilder<ServerStatsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "agents" },
                new GraphQlFieldMetadata { Name = "ships" },
                new GraphQlFieldMetadata { Name = "systems" },
                new GraphQlFieldMetadata { Name = "waypoints" }
            };

        protected override string TypeName { get { return "ServerStats"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ServerStatsQueryBuilder WithAgents(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("agents", alias, new GraphQlDirective[] { include, skip });
        }

        public ServerStatsQueryBuilder ExceptAgents()
        {
            return ExceptField("agents");
        }

        public ServerStatsQueryBuilder WithShips(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ships", alias, new GraphQlDirective[] { include, skip });
        }

        public ServerStatsQueryBuilder ExceptShips()
        {
            return ExceptField("ships");
        }

        public ServerStatsQueryBuilder WithSystems(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("systems", alias, new GraphQlDirective[] { include, skip });
        }

        public ServerStatsQueryBuilder ExceptSystems()
        {
            return ExceptField("systems");
        }

        public ServerStatsQueryBuilder WithWaypoints(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("waypoints", alias, new GraphQlDirective[] { include, skip });
        }

        public ServerStatsQueryBuilder ExceptWaypoints()
        {
            return ExceptField("waypoints");
        }
    }

    public class ShipQueryBuilder : GraphQlQueryBuilder<ShipQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "role" },
                new GraphQlFieldMetadata { Name = "status" },
                new GraphQlFieldMetadata { Name = "system", IsComplex = true, QueryBuilderType = typeof(SystemQueryBuilder) },
                new GraphQlFieldMetadata { Name = "waypoint", IsComplex = true, QueryBuilderType = typeof(WaypointQueryBuilder) }
            };

        protected override string TypeName { get { return "Ship"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ShipQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ShipQueryBuilder WithRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("role", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public ShipQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public ShipQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public ShipQueryBuilder WithSystem(SystemQueryBuilder systemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("system", alias, systemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipQueryBuilder ExceptSystem()
        {
            return ExceptField("system");
        }

        public ShipQueryBuilder WithWaypoint(WaypointQueryBuilder waypointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("waypoint", alias, waypointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ShipQueryBuilder ExceptWaypoint()
        {
            return ExceptField("waypoint");
        }
    }

    public class SystemQueryBuilder : GraphQlQueryBuilder<SystemQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "x" },
                new GraphQlFieldMetadata { Name = "y" },
                new GraphQlFieldMetadata { Name = "waypoints", IsComplex = true, QueryBuilderType = typeof(WaypointQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hasJumpgates" },
                new GraphQlFieldMetadata { Name = "factions", IsComplex = true }
            };

        protected override string TypeName { get { return "System"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SystemQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SystemQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SystemQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public SystemQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public SystemQueryBuilder WithX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("x", alias, new GraphQlDirective[] { include, skip });
        }

        public SystemQueryBuilder ExceptX()
        {
            return ExceptField("x");
        }

        public SystemQueryBuilder WithY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("y", alias, new GraphQlDirective[] { include, skip });
        }

        public SystemQueryBuilder ExceptY()
        {
            return ExceptField("y");
        }

        public SystemQueryBuilder WithWaypoints(WaypointQueryBuilder waypointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("waypoints", alias, waypointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SystemQueryBuilder ExceptWaypoints()
        {
            return ExceptField("waypoints");
        }

        public SystemQueryBuilder WithHasJumpgates(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasJumpgates", alias, new GraphQlDirective[] { include, skip });
        }

        public SystemQueryBuilder ExceptHasJumpgates()
        {
            return ExceptField("hasJumpgates");
        }

        public SystemQueryBuilder WithFactions(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("factions", alias, new GraphQlDirective[] { include, skip });
        }

        public SystemQueryBuilder ExceptFactions()
        {
            return ExceptField("factions");
        }
    }

    public class SystemConnectionQueryBuilder : GraphQlQueryBuilder<SystemConnectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(SystemEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "SystemConnection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SystemConnectionQueryBuilder WithEdges(SystemEdgeQueryBuilder systemEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, systemEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SystemConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public SystemConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SystemConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class SystemEdgeQueryBuilder : GraphQlQueryBuilder<SystemEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor" },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(SystemQueryBuilder) }
            };

        protected override string TypeName { get { return "SystemEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SystemEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public SystemEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public SystemEdgeQueryBuilder WithNode(SystemQueryBuilder systemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, systemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SystemEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class WaypointQueryBuilder : GraphQlQueryBuilder<WaypointQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "system", IsComplex = true, QueryBuilderType = typeof(SystemQueryBuilder) },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "x" },
                new GraphQlFieldMetadata { Name = "y" },
                new GraphQlFieldMetadata { Name = "connectedTo", IsComplex = true, QueryBuilderType = typeof(WaypointQueryBuilder) }
            };

        protected override string TypeName { get { return "Waypoint"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public WaypointQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public WaypointQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public WaypointQueryBuilder WithSystem(SystemQueryBuilder systemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("system", alias, systemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WaypointQueryBuilder ExceptSystem()
        {
            return ExceptField("system");
        }

        public WaypointQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public WaypointQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public WaypointQueryBuilder WithX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("x", alias, new GraphQlDirective[] { include, skip });
        }

        public WaypointQueryBuilder ExceptX()
        {
            return ExceptField("x");
        }

        public WaypointQueryBuilder WithY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("y", alias, new GraphQlDirective[] { include, skip });
        }

        public WaypointQueryBuilder ExceptY()
        {
            return ExceptField("y");
        }

        public WaypointQueryBuilder WithConnectedTo(WaypointQueryBuilder waypointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connectedTo", alias, waypointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WaypointQueryBuilder ExceptConnectedTo()
        {
            return ExceptField("connectedTo");
        }
    }
    #endregion

    #region input classes
    public class PageArgs : IGraphQlInputObject
    {
        private InputPropertyInfo _first;
        private InputPropertyInfo _after;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> First
        {
            get { return (QueryBuilderParameter<int?>)_first.Value; }
            set { _first = new InputPropertyInfo { Name = "first", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> After
        {
            get { return (QueryBuilderParameter<string>)_after.Value; }
            set { _after = new InputPropertyInfo { Name = "after", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_first.Name != null) yield return _first;
            if (_after.Name != null) yield return _after;
        }
    }
    #endregion

    #region data classes
    public class Agent
    {
        public string Name { get; set; }
        public long Credits { get; set; }
        public string Hq { get; set; }
    }

    public class PageInfo
    {
        public bool? HasPreviousPage { get; set; }
        public bool? HasNextPage { get; set; }
        public int? TotalCount { get; set; }
        public string StartCursor { get; set; }
        public string EndCursor { get; set; }
    }

    public class Query
    {
        public Server Server { get; set; }
        public Agent Agent { get; set; }
        public ICollection<Ship> Ships { get; set; }
        public SystemConnection Systems { get; set; }
    }

    public class Server
    {
        public string Version { get; set; }
        public DateTime LastReset { get; set; }
        public DateTime NextReset { get; set; }
        public ServerStats Stats { get; set; }
        public ICollection<ServerAnnouncement> Announcements { get; set; }
    }

    public class ServerAnnouncement
    {
        public string Title { get; set; }
        public string Body { get; set; }
    }

    public class ServerStats
    {
        public int? Agents { get; set; }
        public int? Ships { get; set; }
        public int? Systems { get; set; }
        public int? Waypoints { get; set; }
    }

    public class Ship
    {
        public string Name { get; set; }
        public ShipRole? Role { get; set; }
        public ShipStatus? Status { get; set; }
        public System System { get; set; }
        public Waypoint Waypoint { get; set; }
    }

    public class System
    {
        public string Name { get; set; }
        public SystemType? Type { get; set; }
        public int? X { get; set; }
        public int? Y { get; set; }
        public ICollection<Waypoint> Waypoints { get; set; }
        public bool? HasJumpgates { get; set; }
        public ICollection<Faction> Factions { get; set; }
    }

    public class SystemConnection
    {
        public ICollection<SystemEdge> Edges { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class SystemEdge
    {
        public string Cursor { get; set; }
        public System Node { get; set; }
    }

    public class Waypoint
    {
        public string Name { get; set; }
        public System System { get; set; }
        public WaypointType? Type { get; set; }
        public int? X { get; set; }
        public int? Y { get; set; }
        public ICollection<Waypoint> ConnectedTo { get; set; }
    }
    #endregion
}
